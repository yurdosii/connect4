import pytest

from src.core import detect_winner, is_valid_move


@pytest.mark.parametrize(
    "row, col, expected",
    (
        (5, 0, True),
        (4, 0, False),
        (1, 1, False),
        (1, 4, True),
        (0, 3, False),
        (3, 2, True),
    ),
)
def test_is_valid_move(row, col, expected):
    board = [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 2, 0, 0],
        [0, 0, 2, 2, 1, 0, 0],
        [0, 0, 1, 1, 2, 0, 0],
    ]
    assert is_valid_move(row, col, board) == expected


@pytest.mark.parametrize(
    "board, expected",
    (
        # down winner
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 0],
                [0, 2, 0, 1, 0, 0, 0],
                [0, 2, 0, 1, 0, 0, 0],
                [0, 2, 0, 1, 0, 0, 0],
            ],
            1,
        ),
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 0, 0, 1, 0],
                [0, 0, 2, 2, 0, 2, 0],
                [0, 0, 2, 1, 0, 1, 0],
                [0, 0, 2, 2, 0, 2, 0],
                [0, 2, 1, 1, 0, 1, 0],
            ],
            2,
        ),
        # left winner
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 0],
                [0, 0, 1, 2, 1, 1, 0],
                [0, 0, 2, 2, 1, 2, 0],
                [0, 0, 1, 1, 2, 1, 0],
            ],
            1,
        ),
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 2, 2, 2, 0, 0, 0],
                [1, 1, 1, 1, 0, 0, 0],
            ],
            1,
        ),
        # right winner
        (
            [
                [0, 0, 0, 2, 2, 2, 2],
                [0, 0, 0, 1, 1, 2, 2],
                [0, 0, 0, 2, 2, 1, 1],
                [0, 0, 0, 1, 2, 2, 2],
                [0, 0, 0, 2, 1, 1, 2],
                [0, 0, 0, 1, 2, 1, 1],
            ],
            2,
        ),
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 2, 0, 0, 0, 0],
                [2, 2, 2, 0, 2, 2, 0],
                [1, 1, 1, 1, 1, 1, 1],
            ],
            1,
        ),
        # left down winner
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 0, 0, 0],
                [0, 0, 2, 1, 0, 0, 0],
                [0, 2, 1, 2, 0, 0, 0],
                [2, 1, 1, 1, 0, 0, 0],
            ],
            2,
        ),
        (
            [
                [0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 1],
                [0, 1, 0, 0, 1, 2, 2],
                [1, 2, 0, 1, 2, 1, 1],
                [2, 2, 0, 2, 1, 2, 2],
                [1, 1, 0, 1, 2, 1, 1],
            ],
            1,
        ),
        # right down winner
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 2, 0, 0, 0],
                [0, 0, 0, 2, 2, 0, 0],
                [0, 0, 0, 1, 1, 2, 0],
                [0, 0, 0, 1, 1, 1, 2],
            ],
            2,
        ),
        (
            [
                [0, 0, 1, 1, 0, 0, 0],
                [0, 0, 1, 2, 0, 0, 0],
                [0, 0, 2, 1, 2, 0, 0],
                [0, 0, 1, 2, 1, 0, 0],
                [0, 0, 2, 1, 1, 1, 0],
                [0, 0, 1, 2, 2, 2, 0],
            ],
            1,
        ),
        # no winner
        (
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 2, 0, 0, 0],
            ],
            None,
        ),
        (
            [
                [2, 2, 1, 2, 2, 2, 1],
                [1, 1, 2, 1, 1, 1, 2],
                [2, 2, 1, 2, 2, 2, 1],
                [1, 1, 2, 1, 1, 1, 2],
                [2, 2, 1, 2, 2, 2, 1],
                [1, 1, 2, 1, 1, 1, 2],
            ],
            None,
        ),
        (
            [
                [1, 0, 0, 0, 0, 0, 0],
                [2, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0],
                [2, 2, 0, 0, 0, 0, 0],
                [1, 2, 0, 0, 1, 0, 0],
                [1, 2, 0, 0, 1, 0, 2],
            ],
            None,
        ),
    ),
)
def test_detect_winner(board, expected):
    assert detect_winner(board) == expected
